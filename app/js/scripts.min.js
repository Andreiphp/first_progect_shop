'use strict';

function ElementProduct(id, name, img, price) {
    let one_product = "<div class='product'>"
        + "<a class='prod_link' href='#shop/product/" + id + "' id=" + id + "> "
        + "<img class='product_img' data-image=" + id + " src='app/img/content/small_img/" + img + "'></a>"
        + "<span class='product_title'><a class='prod_link' href='#shop/product/" + id + "' id=" + id + "> " + name + "</a></span>"
        + "<div class='min_description'>To build lean muscle, you obviously need to train hard, apply yourself, and have good nutrition, but the most important part of any muscle-building nutrition program is proteinâ€¦ High-quality protein!</div>"
        + "<span class='add_to_cart'><button class='cart' id=" + id + ">ADD TO CART</button></span>"
        + "<span class='product_price'>" + '$' + +price + "</span></div>";
    return one_product;
}


function subCategories(id, title, img) {
    let sub_cat = "<div class='goals_items'><a href='#shop/sub_categories/" + title + "'>"
        + "<img class='' src='app/img/" + img + "'>"
        + "<span class='goals_bacg'></span>"
        + "<span class='goals_bacg_title'>" + title + "</span></a></div>";
    return sub_cat;
}

function adminProducts2(id, img, title, price, count) {
    let tr = document.createElement('tr');
    let steps = 1000 / (1000 / 50);
    let op = 0;
    let d0 = 1 / steps;
    let set = setInterval(() => {
        op += d0;
        tr.style.opacity = op;
        steps--;
        if (steps <=0) {
            clearInterval(set);
        }
    }, 20);

    tr.id = id;
    let td1 = document.createElement('td');
    let td2 = document.createElement('td');
    let td3 = document.createElement('td');
    let td4 = document.createElement('td');
    let td5 = document.createElement('td');
    let td6 = document.createElement('td');
    let button1 = document.createElement('button');
    let button2 = document.createElement('button');
    button1.textContent = 'Edit';
    button2.textContent = 'Delete';
    button1.setAttribute('data-edit',id);

    button2.setAttribute('data-delite',id);
    td5.appendChild(button1);
    td6.appendChild(button2);
    let image = new Image();
    image.src = '/app/img/content/small_img/' + img;
    td1.appendChild(image);
    td2.textContent = title;
    td3.textContent = price;
    td4.textContent = count;
    tr.appendChild(td1);
    tr.appendChild(td2);
    tr.appendChild(td3);
    tr.appendChild(td4);
    tr.appendChild(td5);
    tr.appendChild(td6);

    return tr;

}

// function adminProducts(id, img, title, price, count) {
//     let res = "<tr id=" + id + ">"
//         + "<td><img src='/app/img/content/small_img/" + img + "'></td>"
//         + "<td>" + title + "</td>"
//         + "<td> " + price + " </td>"
//         + "<td> " + count + "</td>"
//         + "<td><button data-edit=" + id + ">edit</button> </td>"
//         + "<td><button data-delite=" + id + ">delite</button> </td></tr>";
//     return res;
// }

function orders(id, time, comment, delivery) {
    let orders = "<tr> <td>" + id + "</td>"
        + "<td>" + time + "</td>"
        + "<td> " + comment + " </td>"
        + "<td> " + delivery + "</td>"
        + "<td><button data-order=" + id + ">check</button> </td></tr>";
    return orders;
}

function applyStyle(bool, error_name) {
    if (bool) {
        error_name.textContent = 'valid';
        error_name.style.color = 'green';
    } else {
        error_name.textContent = 'not valid';
        error_name.style.color = 'red';
    }
}

function createTableProducts(products) {
    let result = '';
    let tableProducts = document.querySelector('.admin_products');
    products.forEach(el => {
        result = adminProducts2(el.id, el.img, el.title, el.price, el.count);
        tableProducts.appendChild(result);
    });


}

function postReq(url, params) {
    return new Promise(function (resolve, reject) {
        let xhr = new XMLHttpRequest();
        xhr.open('POST', url, true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
        xhr.onload = function () {
            if (this.status === 200) {
                resolve(this.response);
            } else {
                let error = new Error(this.statusText);
                error.code = this.status;
                reject(error);
            }
        };
        xhr.onerror = function () {
            reject(new Error("Network Error"));
        };

        xhr.send(params);

    });
}


'use strict';

class Goods {
    constructor() {
        this.main = document.querySelector('.main');
        if (!this.main) {
            this.main = document.querySelector('.main_list');
        }
        this.specials = document.querySelector('.main_specials');
        this.productImage = document.querySelector('.product_images');
    }

    getDAta(url) {
        return new Promise(function (resolve, reject) {
            let xhr = new XMLHttpRequest();

            xhr.open('GET', url, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
            xhr.onload = function () {
                if (this.status === 200) {
                    resolve(this.response);
                } else {
                    let error = new Error(this.statusText);
                    error.code = this.status;
                    reject(error);
                }
            };
            xhr.onerror = function () {
                reject(new Error("Network Error"));
            };

            xhr.send();

        });
    }

    getSortProducts(page) {
        let sort_name = JSON.parse(localStorage.getItem('sort'));
        let start = "sorting=" + sort_name.param + "&page=" + ((page - 1) * 6);
        this.getDAta('sortingProducts.php?' + start).then(res => {
            let products = JSON.parse(res);
            return products;
        }).then(res => {
            let result = '';
            res.forEach(function (el) {
                result += ElementProduct(el.id, el.title, el.img, el.price);
            });
            return result;
        }).then(str => {
            while (this.main.firstChild) {
                this.main.firstChild.remove();
            }
            this.main.insertAdjacentHTML('afterBegin', str);

        })
    }


    getSpecialProducts() {
        let specials = "specials=" + 1;
        this.getDAta('poducts.php?' + specials).then(res => {
            let products = JSON.parse(res);
            return products;
        }).then(res => {

            let result = '';
            res.forEach(function (el) {
                result += ElementProduct(el.id, el.title, el.img, el.price);
            });
            return result;
        }).then(str => {
            this.specials.insertAdjacentHTML('afterBegin', str);
        });
    }


    getOneProduct(id) {
        let id_product = "id_product=" + id;
        this.getDAta('singleProduct.php?' + id_product).then(res => {
            let products = JSON.parse(res);
            return products;
        }).then(res => {
            console.log(res);
            if(res.length<=0){
                template.getErrorTemplate();
                return false;
            }
            let buttTocart = document.getElementById('toCart');
            buttTocart.setAttribute('data-tocart',res.id);
            let m = document.querySelector('.main_img');
            let title = document.querySelector('.product_title');
            let price = document.querySelector('.product_price');
            let span = document.createElement('span');
            let span2 = document.createElement('span');
            span.textContent = '$';
            span2.textContent = res.price;
            let discription = document.getElementById('desc');
            let pc = document.getElementById('pc');
            m.src = 'app/img/content/large_img/' + res.img;
            title.textContent = res.title;
            price.appendChild(span2);
            price.appendChild(span);
            discription.textContent = res.discription;
            pc.textContent = res.composition;
            this.cloneImg();
        })
    }

    cloneImg() {
        this.image = document.querySelector('.main_img');
        let self = this;
        let img2 = self.image.cloneNode(true);
        img2.className = 'imd2';
        self.productImage.appendChild(img2);
        let T = this.image.getBoundingClientRect();
        let K = img2.getBoundingClientRect();
        this.related = null;
        this.productImage.onmouseover = function (event) {
            img2.style.width = '110%';
            img2.style.height = '110%';
        };
        this.productImage.addEventListener('mousemove', function (event) {
            img2.style.left = (K.width / 2 - event.offsetX) / 10 - 30 + 'px';
            img2.style.top = (K.y / 2 - event.offsetY) / 10 + 'px';
        });
        this.productImage.onmouseout = function (event) {
            img2.style.left = 0;
            img2.style.top = 0;
            img2.style.width = '100%';
            img2.style.height = '100%';

        };
    }

    activeTabs() {
        let tabs = document.querySelectorAll('.tabs_list');
        let discription = document.getElementById('desc');
        let pc = document.getElementById('pc');
        document.querySelector('.tabs_product').addEventListener('click', function (event) {
            if (event.target.getAttribute('data-content') === 'desc') {
                discription.style.display = 'block';
                pc.style.display = 'none';
            }
            if (event.target.getAttribute('data-content') === 'pc') {

                pc.style.display = 'block';
                discription.style.display = 'none';

            }
        })
    }

}






'use strict';

class Cat extends Goods {
    constructor() {
        super();
    }

    getLinksForCategories() {
        let result = '';
        let links = '';
        this.getDAta('getCategories.php').then(res => {
            result = JSON.parse(res);
            return result;
        }).then((result) => {
            result.forEach(function (el) {
                links += "<li><a class='menu_links' href='#shop/category/" + el.links + "' id=" + el.id + ">" + el.name + "</a></li> ";
            });
            return links;
        }).then(links => {
            document.getElementById('cat').innerHTML = links;
            return true;
        }).then(() => {
            this.activeLinksCat();
        });
    }

    getSortCategoryProducts(name, page) {
        if (!page) {
            page = 1;
        }
        let sort_name = JSON.parse(localStorage.getItem('sort'));
        let start = "cat_links=" + name + "&sorting=" + sort_name.param + "&page=" + ((page - 1) * 6);
        this.getDAta('getSortCatProducts.php?' + start).then(res => {
            let products = JSON.parse(res);
            return products;
        }).then(res => {
            let result = '';
            res.forEach(function (el) {
                result += ElementProduct(el.id, el.title, el.img, el.price);
            });
            return result;
        }).then(str => {
            while (this.main.firstChild) {
                this.main.firstChild.remove();
            }
            this.main.insertAdjacentHTML('afterBegin', str);
        }).catch(error => {
           // let template = new Templates();
            template.getErrorTemplate();
        });
    }

    // getSubCategories() {
    //     let sub_cat = "sub_cat=" + 1;
    //     this.getDAta('getCategories.php?' + sub_cat).then(res => {
    //         let sub_category = JSON.parse(res);
    //         return sub_category;
    //     }).then(res => {
    //         let result = '';
    //         res.forEach(function (el) {
    //             result += subCategories(el.id, el.title, el.img);
    //         });
    //         return result;
    //     }).then(str => {
    //         document.querySelector('.goals_category').insertAdjacentHTML('afterBegin', str);
    //     });
    // }

    activeLinksCat() {
        let hash = window.location.href;
        let res = hash.split('/');
        let del = res.pop();
        let hash_links = res.join('/');
        let menu_links = document.querySelectorAll('.menu_links');
        for (let i = 0; i < menu_links.length; i++) {
            if (window.location.href === menu_links[i].href || window.location.href === menu_links[i].href + '/' || hash_links === menu_links[i].href) {
                menu_links[i].classList.add("active_menu_links");
            } else {
                menu_links[i].classList.remove("active_menu_links");
            }

        }

    }
}







'use strict';

class Router {
    constructor(routers) {
        this.routers = routers;
        this.query = '([a-zA-Z]{1,10}(?:-?[a-zA-Z])*)\/?';
        this.page = '([0-9]{1,})\/?';
        this.flag = false;
        this.matchesRoots();
        let self = this;
        window.addEventListener('hashchange', function (e) {
            e.preventDefault();
            self.matchesRoots();
        });
        window.history.pushState(null, null, window.location.hash);
    }

    matchesRoots() {
        this.url = window.location.hash.slice(1);
        this.count = 0;
        this.fall = 0;
        let matches = [];
        for (let key in this.routers.roots) {
            let reg = this.getRegular(key);
            if (reg.test(this.url)) {
                matches = this.url.match(reg);
                this.funcMatches(this.routers.roots[key], matches);
            } else {
                this.fall++;
            }
            this.count++;
        }
        if (this.fall === this.count) {
            this.routers['error'].apply(null);
        }
    }

    getRegular(key) {
        let str = key.replace(/:query/g, this.query);
        str = str.replace(/:page/g, this.page);
        let strReg = '^' + str + '$';
        let regEx = new RegExp(strReg);

        return regEx;
    }

    funcMatches(key, matches) {
        if (matches.length > 1) {
            this.routers[key].apply(null, matches);
        } else {
            this.routers[key].apply(null);
        }
    }
}
